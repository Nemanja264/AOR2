-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all ;

entity kolo is
generic(n: integer := 4;);
port(a,clk:in std_logic;
	b,c: in std_logic_vector(n-1 downto 0);
	f: out std_logic_vector(n-1 downto 0););
end entity;

architecture a_kolo of kolo is

begin
	
    generisi: for i in 0 to n-1 generate
    	uslov1: if clk'event and clk='1' generate
          uslov: if i = 0 generate
              dut1: entity work.A(a_arch)
              port map(a,b(i),c(i),f(i));
          else generate
              duti: entity work.A(a_arch)
              port map(f(i-1),b,c,f(i));
          end generate;
        end generate;
    end generate;
end architecture;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all ;

entity A is
port (a,b,c:in std_logic;
	f: out std_logic;);
end entity;

architecture a_arch of A is
begin

f <= (a xor b) or c;

end architecture;

library IEEE ;
  use IEEE.std_logic_1164.all ;
  use IEEE.numeric_std.all ;

entity tb is
  generic (n : integer := 4;
end tb ; 

architecture a_tb of tb is
  signal b,c,f : std_logic_vector(n-1 downto 0);
  signal clk,a : std_logic;
begin

  dut4: entity work.kolo(a_kolo)
  	generic map(n)
    port map (a,clk,b,c, f);
    
 process
    begin
        clk <= '1'; wait for 5 ns;
        clk <= '0'; wait for 5 ns;
    end process;
 
  stimuli : process
  begin
    a <= '1';
    b <= "0101";
    c <= "1000";
    wait for 10ns;
    
    wait;
  end process stimuli;

end architecture;
