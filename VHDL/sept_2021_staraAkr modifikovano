-- KADA BI RADILI BEZ UGRADJIVANJA KOLA PARNOSTI

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all ;

entity kolo is
generic(n: integer := 9);
port (num1,num2: in std_logic_vector(n downto 0);
    dout: out std_logic_vector(n-1 downto 0);
    par: out std_logic);
end entity;

architecture a_kolo of kolo is
begin

process(num1,num2)
variable br1, br2: std_logic_vector(n-1 downto 0);
variable bitp1, bitp2: std_logic;
begin
	
    br1 := num1(n-1 downto 0);
    br2 := num2(n-1 downto 0);
     dout <= std_logic_vector(unsigned(br1) + unsigned(br2));
    
    bitp1 := num1(0);
    bitp2 := num2(0);
    for i in 1 to n-1 loop
    	bitp1 := bitp1 xor num1(i);
        bitp2 := bitp2 xor num2(i);
    end loop;
    
    if (bitp1 = num1(n) and bitp2 = num2(n)) then
    	par <= '1';
    else
    	par <= '0';
    end if;
    
end process;

----------------------------
-- TESTBENCH

library IEEE ;
  use IEEE.std_logic_1164.all ;
  use IEEE.numeric_std.all ;

entity tb is
  generic (n : integer := 9);
end tb; 

architecture a_tb of tb is
  signal dout : std_logic_vector(n-1 downto 0);
  signal par: std_logic;
  signal num1,num2 : std_logic_vector(n downto 0);
begin

  dut4: entity work.kolo(a_kolo)
  	generic map(n)
    port map (num1,num2,dout,par);

  stimuli : process
  begin
	num1 <= "1000001011";
    num2 <= "0000001011";
	wait for 20ns;
   	num1 <= "0000001111";
    num2 <= "1000001011";
	wait for 20ns;
   wait;
  end process stimuli;

end architecture;

end architecture;

